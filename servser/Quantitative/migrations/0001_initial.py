# Generated by Django 2.1.4 on 2019-05-11 10:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('company_id', models.IntegerField()),
                ('username', models.CharField(blank=True, max_length=50)),
                ('company_name', models.CharField(blank=True, max_length=150)),
                ('ts_code', models.CharField(blank=True, max_length=30)),
                ('fullname', models.CharField(blank=True, max_length=150)),
                ('createTime', models.DateField(blank=True)),
            ],
            options={
                'db_table': 'company_collection',
            },
        ),
        migrations.CreateModel(
            name='StockCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts_code', models.CharField(max_length=20)),
                ('symbol', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=50)),
                ('area', models.CharField(max_length=50)),
                ('industry', models.CharField(max_length=100)),
                ('fullname', models.CharField(max_length=200)),
                ('enname', models.CharField(max_length=255)),
                ('market', models.CharField(max_length=50)),
                ('exchange', models.CharField(max_length=10)),
                ('curr_type', models.CharField(max_length=50)),
                ('list_status', models.CharField(max_length=10)),
                ('list_date', models.DateField(blank=True)),
                ('delist_date', models.DateField(blank=True)),
                ('is_hs', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'stock_company',
            },
        ),
        migrations.CreateModel(
            name='StockCompanyDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ts_code', models.CharField(max_length=20)),
                ('exchange', models.CharField(blank=True, max_length=10)),
                ('chairman', models.CharField(blank=True, max_length=30)),
                ('manager', models.CharField(blank=True, max_length=30)),
                ('secretary', models.CharField(blank=True, max_length=30)),
                ('reg_capital', models.FloatField(blank=True)),
                ('setup_date', models.DateField(blank=True)),
                ('province', models.CharField(blank=True, max_length=30)),
                ('city', models.CharField(blank=True, max_length=30)),
                ('introduction', models.CharField(blank=True, max_length=3000)),
                ('website', models.CharField(blank=True, max_length=100)),
                ('email', models.CharField(blank=True, max_length=500)),
                ('office', models.CharField(blank=True, max_length=2000)),
                ('employees', models.FloatField(blank=True, max_length=20)),
                ('main_business', models.CharField(blank=True, max_length=500)),
                ('business_scope', models.CharField(blank=True, max_length=3000)),
            ],
            options={
                'db_table': 'stock_company_detail',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=20)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('sex', models.CharField(blank=True, max_length=1)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('signature', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
